#!/bin/bash

# set overrides for setlX launcher script
export OVERRIDE_setlXJarDirectory="$PWD/interpreter"

# other locations for tests
setlXlaunchScript="$OVERRIDE_setlXJarDirectory/setlX"

cd "$OVERRIDE_setlXJarDirectory"

echo "=> Cleaning the setlX interpreter's source (1/2) ..."
mvn clean -P dist-clean

cd ..

# run tests
if [ "$1" != "noTests" ]; then
    echo "=> Testing the setlX interpreter ..."
    ./test_all_examples; rc=$?
    if [ $rc -ne 0 ]; then
        echo "=> Errors occured while testing the interpreter."
        echo "=> Distribution stopped!"
        exit 1
    fi
fi

cd "$OVERRIDE_setlXJarDirectory"

echo "=> Cleaning the setlX interpreter's source (2/2) ..."
mvn clean -P dist-clean

# build the binary version
echo "=> Rebuilding the setlX interpreter ..."
mvn install
if [[ -f "$OVERRIDE_setlXJarDirectory/setlX.jar" && "$OVERRIDE_setlXJarDirectory/setlX-gfx.jar" && "$OVERRIDE_setlXJarDirectory/setlX-plot.jar" && "$OVERRIDE_setlXJarDirectory/setlX-stat.jar" && "$OVERRIDE_setlXJarDirectory/setlX-sound.jar" ]]; then
    # clean it up again (does not remove the jar)
    mvn clean
    echo "=> The setlX interpreter was build correctly."
else
    echo "=> Building the setlX interpreter failed ..."
    # break
    exit 1
fi

# ensure some files use Windows line-endings
if [ $(which unix2dos > /dev/null 2>&1; echo $?) -eq 0 ]; then
    unix2dos "$OVERRIDE_setlXJarDirectory/setlX.cmd"
fi

# get version from executable (jar)
version=$("$setlXlaunchScript" --version | head -n 1)

# warn if current release is not tagged in git
gitWarning=""
if [ -d "../.git" -a $(which git >/dev/null 2>&1; echo $?) -eq 0 ]
  then
    if [ $(git tag | grep -c "v$version") -ne 1 ]; then
        gitWarning="WARNING: Version number of created distribution is not tagged in git!"
        version="$version.experimental"
    elif [ $(git diff --name-only "v$version" | wc -l) -gt 0 ]; then
        gitWarning="WARNING: Source differs from commit tagged with 'v$version' in git!"
        version="$version.experimental"
    fi
else
    gitWarning="WARNING: Build version could not be verified (git or git-repo missing)"
fi

cd ..

# create version string for file names
versionForFileNames=$(echo $version | tr "." "-")

# goto documentation source
cd documentation

# clean the documentation source
echo "=> Cleaning the documentation's source ..."
make dist-clean

# set version for documentation
echo "$version" > version.tex

# make documentation
echo "=> Rebuilding the documentation ..."
make
if [ -f developmentGuide.pdf -a -f manual.pdf ]
  then
    # move the finished PDFs where they belong
    mv -f *.pdf ../.
    # clean it up again
    make dist-clean
    echo "=> The documentation was build correctly."
else
    echo "=> Building the documentation failed ..."
    # break
    exit 1
fi

# goto pure grammar
cd ../grammar_pure

# clean the pure grammar source
echo "=> Cleaning the pure grammar source ..."
make clean
rm -rf Pure.g4

# update the Pure.g grammar
echo "=> Updating the pure grammar"
make update
if [ -f Pure.g4 ]
  then
    # clean the pure grammar source (again)
    make clean
    echo "=> The pure grammar was updated correctly."
else
    echo "=> Update the pure grammar failed ..."
    # break
    exit 1
fi

# goto tutorial's source
cd ../Tutorial

# clean the documentation source
echo "=> Cleaning the tutorial's source ..."
make dist-clean

# make tutorial
echo "=> Rebuilding the tutorial ..."
make
if [ -f tutorial.pdf ]
  then
    # move the finished PDFs where they belong
    mv -f *.pdf ../.
    # clean it up again
    make dist-clean
    echo "=> The tutorial was build correctly."
else
    echo "=> Building the tutorial failed ..."
    # break
    exit 1
fi

# go to project root
cd ..

# create distribution names
binOnly="setlX_v$versionForFileNames.binary_only"
devel="setlX_v$versionForFileNames.devel"
examples="setlX_v$versionForFileNames.examples"

# remove distribution zips if present
rm -f "setlX_v"*".zip"
# remove other stuff
rm -f test_failure.*.result

# create binary only zip
echo -n "=> Creating binary only distribution ... "
mkdir -p zipContents
cp changelog.txt license.txt manual.pdf tutorial.pdf $OVERRIDE_setlXJarDirectory/setlX $OVERRIDE_setlXJarDirectory/setlX.cmd $OVERRIDE_setlXJarDirectory/setlX.jar $OVERRIDE_setlXJarDirectory/setlX-gfx.jar $OVERRIDE_setlXJarDirectory/setlX-plot.jar $OVERRIDE_setlXJarDirectory/setlX-stat.jar $OVERRIDE_setlXJarDirectory/setlX-sound.jar zipContents/.
cp -r syntax_highlighting zipContents/.
cp -r interpreter/setlXlibrary zipContents/.
cd zipContents; zip -qr "../$binOnly.zip" . ; cd ..
rm -rf zipContents
echo "done"

# create examples zip
echo -n "=> Creating example code distribution ... "
cp -r example_SetlX_code zipContents
while read -r -d $'\0' filename; do
    rm -f "$filename"
done < <( find "zipContents" -type f \( -name "*.stlx.reference" -o -name "*.stlx.input" -o -name "*.real.csv" -o -name "*.sys.csv" -o -name "*.user.csv" \) -print0 )
while read -r -d $'\0' emptyDir; do
    rmdir "$emptyDir"
done < <( find "zipContents" -type d -empty -print0 )
cd zipContents; zip -qr "../$examples.zip" . ; cd ..
rm -rf zipContents
echo "done"

# remove the jars
cd "$OVERRIDE_setlXJarDirectory"
mvn clean -P dist-clean
cd ..

# create development zip
echo -n "=> Creating development kit ... "
zip -qr "$devel.zip" . -x \*.zip \*.git\* \*.idea\* \*.iml
echo "done"

if [ -n "$gitWarning" ]
  then
    echo >&2
    echo "$gitWarning" >&2
    echo >&2
fi

